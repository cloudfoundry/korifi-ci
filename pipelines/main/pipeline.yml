common:
  slack_hook: &slackHook
    put: slack
    params:
      channel: '#korifi-ci'
      text: |
        Job <https://ci.korifi.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|*$BUILD_PIPELINE_NAME*/*$BUILD_JOB_NAME*#*$BUILD_NAME*> failed! :cry:

  set_cluster_vars: &setClusterVars
    task: set-cluster-env-vars
    file: korifi-ci/pipelines/tasks/set-cluster-env-vars.yml
    image: ci-image

  undeploy-korifi: &undeploy-korifi
    task: undeploy-korifi
    file: korifi-ci/pipelines/tasks/undeploy-korifi.yml
    image: ci-image
    params:
      AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

  ensure-undeploy-korifi: &ensure-undeploy-korifi
    <<: *undeploy-korifi
    attempts: 10


groups:
- name: main
  jobs:
  - run-tests-main
  - run-e2es-main
  - run-e2es-eks
  - publish-dev-images
- name: pr
  jobs:
  - run-e2es-pr
  - run-e2es-eks-pr
- name: periodics
  jobs:
  - run-tests-periodic
  - run-e2es-periodic
  - run-e2es-eks-periodic
  - bump-tests-vendor
  - update-manifests
- name: acceptance
  jobs:
  - deploy-korifi-acceptance
  - deploy-pairup
  - deploy-postfacto
  - check-long-living-app
- name: release
  jobs:
  - bump-major-version
  - bump-minor-version
  - bump-patch-version
  - publish-release
- name: clusters
  jobs:
  - recreate-cluster-acceptance
  - recreate-cluster-eks
  - recreate-cluster-pr-e2e

jobs:
# ===== main =====
- name: run-tests-main
  on_success:
    put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - tests (main)"
  on_failure: &run-tests-main-failure
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - tests (main)"
    - *slackHook
  on_error: *run-tests-main-failure
  serial: true
  plan:
  - in_parallel:
    - get: ci-image
    - get: golangci-lint-image
    - get: korifi
      trigger: true
    - get: korifi-ci

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - tests (main)"

  - in_parallel:
      steps:
      - task: linter
        file: korifi-ci/pipelines/tasks/run-lint.yml
        image: golangci-lint-image
        input_mapping:
          root: korifi

      - in_parallel: &unit-integration
        - task: api-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-api
          params:
            DIR: api
            TARGET: test

        - task: controllers-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-controllers
          params:
            DIR: controllers
            TARGET: test

        - task: job-task-runner-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-job-task-runner
          params:
            DIR: job-task-runner
            TARGET: test

        - task: kpack-image-builder-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-kpack-image-builder
          params:
            DIR: kpack-image-builder
            TARGET: test

        - task: statefulset-runner-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-statefulset-runner
          params:
            DIR: statefulset-runner
            TARGET: test

        - task: tools-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-tools
          params:
            DIR: tools
            TARGET: test

        - task: migration-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-tools
          params:
            DIR: migration
            TARGET: test

  # - task: publish-code-coverage
  #   image: ci-image
  #   file: korifi-ci/pipelines/tasks/publish-code-coverage.yml
  #   params:
  #     CC_TEST_REPORTER_ID: ((code-climate/test-reporter.id))

- name: run-e2es-main
  on_success:
    put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - E2E (main)"
  on_failure: &run-e2es-main-failure
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - E2E (main)"
    - *slackHook
  on_error: *run-e2es-main-failure

  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
        - run-tests-main
    - get: korifi-ci
    - get: gcloud-image
    - get: cf-k8s-secrets

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - E2E (main)"

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE

  - do: &end-to-ends
    - do: &deploy-korifi
      - load_var: cluster-env-vars
        file: clusters/env_vars.yaml

      - task: install-korifi-dependencies
        file: korifi-ci/pipelines/tasks/install-korifi-dependencies.yml
        image: ci-image
        timeout: 3h
        params:
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          GCP_PROJECT_ID: ((.:cluster-env-vars.GCP_PROJECT_ID))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))

      - task: deploy-korifi
        file: korifi-ci/pipelines/tasks/deploy-korifi.yml
        image: ci-image
        timeout: 3h
        params:
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
          BUILD_CLUSTER_NAME: concourse
          BUILD_CLUSTER_TYPE: GKE
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
          DOCKER_SERVER: europe-docker.pkg.dev
          DOCKER_USERNAME: _json_key
          DOCKER_PASSWORD: ((gcp-artifact-registry-writer))

      - task: update-dns
        file: korifi-ci/pipelines/tasks/update-dns.yml
        image: gcloud-image
        params:
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

    - task: build-dorifi
      file: korifi-ci/pipelines/tasks/build-dorifi.yml
      image: ci-image

    - in_parallel:
      - task: pre-push-dorifi
        file: korifi-ci/pipelines/tasks/push-app.yml
        image: ci-image
        params:
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          APP_PATH: dorifi
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))

      - task: pre-push-multi-process
        file: korifi-ci/pipelines/tasks/push-app.yml
        image: ci-image
        params:
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          APP_PATH: multi-process
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))

      - task: pre-push-sample-broker
        file: korifi-ci/pipelines/tasks/push-app.yml
        image: ci-image
        params:
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          APP_PATH: sample-broker
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))

    - in_parallel:
      - do: &smoke-tests
        - task: run-smoke-tests
          file: korifi-ci/pipelines/tasks/run-smoke-tests.yml
          image: ci-image
          timeout: 3h
          params:
            API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
            APP_FQDN: ((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
            AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
            CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
            CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
            GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
            GINKGO_NODES: 8
            SMOKE_TEST_USER: cf-admin

      - task: run-e2e-tests
        file: korifi-ci/pipelines/tasks/run-e2e-tests.yml
        image: ci-image
        timeout: 3h
        params:
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          APP_FQDN: ((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          FULL_LOG_ON_ERR: yes-please
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          GINKGO_NODES: 8
          ROOT_NAMESPACE: cf
          DEFAULT_APP_BITS_PATH: dorifi
          CSR_SIGNING_DISALLOWED: ((.:cluster-env-vars.CSR_SIGNING_DISALLOWED))

      - task: run-crds-tests
        file: korifi-ci/pipelines/tasks/run-crds-tests.yml
        image: ci-image
        timeout: 3h
        params:
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
          GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
          GINKGO_NODES: 8
          DEFAULT_APP_BITS_PATH: dorifi

  - *undeploy-korifi

  ensure:
    do: &clean-env
    - *ensure-undeploy-korifi
    - task: deploy-latest-release
      file: korifi-ci/pipelines/tasks/deploy-korifi.yml
      image: ci-image
      timeout: 3h
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        DEPLOY_LATEST_RELEASE: please
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
        USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
        DOCKER_SERVER: europe-docker.pkg.dev
        DOCKER_USERNAME: _json_key
        DOCKER_PASSWORD: ((gcp-artifact-registry-writer))

- name: publish-dev-images
  on_success:
    put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - publish images (main)"
  on_failure: &publish-dev-images-failure
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - publish images (main)"
    - *slackHook
  on_error: *publish-dev-images-failure
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
        - run-e2es-main
        - run-e2es-eks
    - get: korifi-ci

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - publish images (main)"

  - task: publish-dev-images
    file: korifi-ci/pipelines/tasks/publish-dev-images.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE
      GCP_ZONE: europe-west1-b
      REGISTRY_HOSTNAME: index.docker.io
      REGISTRY_USER: ((release-pipeline/dockerhub-auth.username))
      REGISTRY_PASSWORD: ((release-pipeline/dockerhub-auth.password))

# ===== PR =====
- name: run-e2es-pr
  on_success:
    put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-tests (pull_request)"
      status: success
  on_failure: &run-e2es-pr-failure
    do:
    - put: korifi-pr
      params:
        path: korifi-pr
        base_context: "Concourse "
        context: " e2e-tests (pull_request)"
        status: failure
    - *slackHook
  on_error: *run-e2es-pr-failure
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
      resource: korifi-pr
      trigger: true
      version: every
      params:
        fetch_tags: true
    - get: cf-k8s-secrets

  - put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-tests (pull_request)"
      status: pending

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE

  - do: *end-to-ends

  - *undeploy-korifi

  ensure:
    do: *clean-env

# ===== eks =====
- name: run-e2es-eks-pr
  on_success:
    put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-eks-tests (pull_request)"
      status: success
  on_failure: &run-e2es-eks-pr-failure
    do:
    - put: korifi-pr
      params:
        path: korifi-pr
        base_context: "Concourse "
        context: " e2e-eks-tests (pull_request)"
        status: failure
    - *slackHook
  on_error: *run-e2es-eks-pr-failure
  serial: true
  serial_groups:
  - eks
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
      resource: korifi-pr
      trigger: true
      version: every
      params:
        fetch_tags: true
    - get: cf-k8s-secrets

  - put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-eks-tests (pull_request)"
      status: pending

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: eks-e2e
      CLUSTER_TYPE: EKS
      CSR_SIGNING_DISALLOWED: true

  - do: *end-to-ends

  - *undeploy-korifi

  ensure:
    do: *clean-env

- name: run-e2es-eks
  on_success:
    put: korifi-status
    params:
      path: korifi
      statuses:
      - state: success
        context: "Concourse - E2E on EKS (main)"
  on_failure: &run-e2es-eks-failure
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - E2E on EKS (main)"
    - *slackHook
  on_error: *run-e2es-eks-failure

  serial: true
  serial_groups:
  - eks
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
      trigger: true
      passed:
        - run-tests-main
    - get: cf-k8s-secrets

  - put: korifi-status
    params:
      path: korifi
      statuses:
      - state: pending
        context: "Concourse - E2E on EKS (main)"

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: eks-e2e
      CLUSTER_TYPE: EKS
      CSR_SIGNING_DISALLOWED: true

  - do: *end-to-ends

  - *undeploy-korifi

  ensure:
    do: *clean-env

# ===== acceptance =====
- name: deploy-korifi-acceptance
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: korifi
      trigger: true
      passed:
      - run-e2es-main
      - run-e2es-eks
    - get: korifi-ci
    - get: ci-image
    - get: cf-k8s-secrets
    - get: gcloud-image

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      CLUSTER_TYPE: GKE
      USE_LETSENCRYPT: true

  - do: *deploy-korifi
  - task: add-chmod-buildpack-for-rails
    file: korifi-ci/pipelines/tasks/add-chmod-rails-buildpack.yml
    image: ci-image
    params:
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
  - do: *smoke-tests

- name: deploy-pairup
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
      - deploy-korifi-acceptance
    - get: korifi-ci
    - get: cf-k8s-secrets
    - get: pairup
      trigger: true

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      CLUSTER_TYPE: GKE
  - load_var: cluster-env-vars
    file: clusters/env_vars.yaml

  - task: deploy-pairup
    file: korifi-ci/pipelines/tasks/deploy-pairup.yml
    image: ci-image
    params:
      API_SERVER_ROOT: cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      FIREBASE_CONF: ((acceptance/pairup.config))
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

- name: deploy-postfacto
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: ci-image
    - get: cf-k8s-secrets
    - get: korifi
      trigger: true
      passed:
      - deploy-korifi-acceptance
    - get: korifi-ci
    - get: postfacto
      resource: postfacto-fork
      trigger: true

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      CLUSTER_TYPE: GKE
  - load_var: cluster-env-vars
    file: clusters/env_vars.yaml

  - task: deploy-postfacto
    file: korifi-ci/pipelines/tasks/deploy-postfacto.yml
    image: ci-image
    params:
      API_SERVER_ROOT: cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

- name: check-long-living-app
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
      - deploy-korifi-acceptance
    - get: korifi-ci
    - get: cf-k8s-secrets

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      CLUSTER_TYPE: GKE
  - load_var: cluster-env-vars
    file: clusters/env_vars.yaml

  - task: build-dorifi
    file: korifi-ci/pipelines/tasks/build-dorifi.yml
    image: ci-image
  - task: ensure-long-living-app
    file: korifi-ci/pipelines/tasks/ensure-long-living-app.yml
    image: ci-image
    params:
      API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

  - task: check-long-living-app
    file: korifi-ci/pipelines/tasks/check-long-living-app.yml
    image: ci-image
    params:
      API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
      GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))

# ===== periodics =====
- name: run-tests-periodic
  on_failure: *slackHook
  on_error: *slackHook
  plan:
  - in_parallel:
    - get: ci-image
    - get: golangci-lint-image
    - get: korifi
    - get: korifi-ci
    - get: workdays-periodic-timer
      trigger: true
  - in_parallel: *unit-integration

- name: run-e2es-periodic
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
    - get: cf-k8s-secrets
    - get: workdays-periodic-timer
      trigger: true
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE
  - do: *end-to-ends
  - *undeploy-korifi
  ensure:
    do: *clean-env

- name: run-e2es-eks-periodic
  on_failure: *slackHook
  on_error: *slackHook
  serial: true
  serial_groups:
  - eks
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
    - get: cf-k8s-secrets
    - get: workdays-periodic-timer
      trigger: true
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: eks-e2e
      CLUSTER_TYPE: EKS
      CSR_SIGNING_DISALLOWED: true
  - do: *end-to-ends
  - *undeploy-korifi
  ensure:
    do: *clean-env

- name: bump-tests-vendor
  on_failure: *slackHook
  on_error: *slackHook
  plan:
    - in_parallel:
      - get: ci-image
      - get: korifi-ci
      - get: korifi
      - get: bump-timer
        trigger: true
    - task: bump-tests-vendor
      file: korifi-ci/pipelines/tasks/bump-tests-vendor.yml
      image: ci-image

- name: update-manifests
  on_failure: *slackHook
  on_error: *slackHook
  plan:
    - in_parallel:
      - get: ci-image
      - get: korifi-ci
      - get: korifi
      - get: bump-timer
        trigger: true
    - task: update-manifests
      file: korifi-ci/pipelines/tasks/update-manifests.yml
      image: ci-image

# ===== release =====
- name: bump-major-version
  plan:
  - get: korifi-release-version
    params:
      bump: major
    passed:
    - publish-release
  - put: korifi-release-version
    params:
      file: korifi-release-version/version
  on_failure: *slackHook
  on_error: *slackHook

- name: bump-minor-version
  plan:
  - get: korifi-release-version
    params:
      bump: minor
    passed:
    - publish-release
  - put: korifi-release-version
    params:
      file: korifi-release-version/version
  on_failure: *slackHook
  on_error: *slackHook

- name: bump-patch-version
  plan:
  - get: korifi-release-version
    params:
      bump: patch
    passed:
    - publish-release
  - put: korifi-release-version
    params:
      file: korifi-release-version/version
  on_failure: *slackHook
  on_error: *slackHook

- name: publish-release
  plan:
  - in_parallel:
      steps:
      - get: korifi-ci
      - get: korifi
        passed:
        - run-e2es-main
        - run-e2es-eks
      - get: korifi-release-version
      - get: ci-image
  - task: check-release-version
    image: ci-image
    config:
      platform: linux
      inputs:
        - name: korifi-release-version
      run:
        path: /bin/bash
        args:
        - -c
        - |
          if curl -f "https://api.github.com/repos/cloudfoundry/korifi/releases/tags/v$(cat korifi-release-version/version)" ; then
            echo "Release $(cat korifi-release-version/version) already exists!"
            exit 1
          fi
  - task: create-release
    file: korifi-ci/pipelines/tasks/create-release.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE
      GCP_ZONE: europe-west1-b
      REGISTRY_HOSTNAME: index.docker.io
      REGISTRY_USER: ((release-pipeline/dockerhub-auth.username))
      REGISTRY_PASSWORD: ((release-pipeline/dockerhub-auth.password))
  - put: korifi-github-release
    params:
      globs:
      - korifi/release-output/*.tgz
      - korifi/release-output/install-korifi-kind.yaml
      name: korifi-release-version/version
      tag: korifi-release-version/version
      tag_prefix: v
      commitish: korifi/.git/ref
  on_failure: *slackHook
  on_error: *slackHook

# ===== clusters =====

# ===== clusters:acceptance =====
- name: recreate-cluster-acceptance
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: korifi-ci
    - get: ci-image
    - get: cf-k8s-secrets
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      CLUSTER_TYPE: GKE
      NODE_MACHINE_TYPE: e2-custom-4-6144
      KPACK_REPO_LOCATION: europe
      KPACK_REPO_NAME: acceptance-images
  - do: &recreateCluster
    - in_parallel:
      - get: gcloud-image
    - load_var: cluster-env-vars
      file: clusters/env_vars.yaml
    - task: delete-dns
      file: korifi-ci/pipelines/tasks/delete-dns.yml
      image: gcloud-image
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
    - task: undeploy-korifi
      file: korifi-ci/pipelines/tasks/undeploy-korifi.yml
      image: ci-image
      attempts: 10
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
    - task: delete-kubernetes-cluster
      privileged: true
      file: korifi-ci/pipelines/tasks/delete-cluster.yml
      image: gcloud-image
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
    - task: delete-disks
      file: korifi-ci/pipelines/tasks/delete-disks.yml
      image: gcloud-image
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
    - task: clean-artifact-registry
      file: korifi-ci/pipelines/tasks/clean-artifact-registry.yml
      image: ci-image
      timeout: 3h
      params:
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        KPACK_REPO_LOCATION: ((.:cluster-env-vars.KPACK_REPO_LOCATION))
        KPACK_REPO_NAME: ((.:cluster-env-vars.KPACK_REPO_NAME))
    - task: create-kubernetes-cluster
      file: korifi-ci/pipelines/tasks/create-cluster.yml
      image: gcloud-image
      attempts: 10
      params:
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        NODE_MACHINE_TYPE: ((.:cluster-env-vars.NODE_MACHINE_TYPE))
  on_failure: *slackHook
  on_error: *slackHook

- name: recreate-cluster-eks
  serial: true
  serial_groups:
  - eks
  plan:
  - in_parallel:
    - get: pr-e2e-delete-timer
      trigger: true
    - get: korifi
    - get: korifi-ci
    - get: ci-image
    - get: cf-k8s-secrets
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: eks-e2e
      CLUSTER_TYPE: EKS
      NODE_MACHINE_TYPE: m5.xlarge
      KPACK_REPO_LOCATION: eu-west-1
      KPACK_REPO_NAME: eks-e2e
  - do: *recreateCluster
  - do: &deployLatestKorifi
    - task: install-korifi-dependencies
      file: korifi-ci/pipelines/tasks/install-korifi-dependencies.yml
      image: ci-image
      timeout: 3h
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_PROJECT_ID: ((.:cluster-env-vars.GCP_PROJECT_ID))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
        USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
    - task: deploy-latest-release
      file: korifi-ci/pipelines/tasks/deploy-korifi.yml
      image: ci-image
      timeout: 3h
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        DEPLOY_LATEST_RELEASE: please
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
        USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
        DOCKER_SERVER: europe-docker.pkg.dev
        DOCKER_USERNAME: _json_key
        DOCKER_PASSWORD: ((gcp-artifact-registry-writer))
    - task: update-dns
      file: korifi-ci/pipelines/tasks/update-dns.yml
      image: gcloud-image
      params:
        AWS_REGION: ((.:cluster-env-vars.AWS_REGION))
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        CLUSTER_TYPE: ((.:cluster-env-vars.CLUSTER_TYPE))
        GCP_ZONE: ((.:cluster-env-vars.GCP_ZONE))
  on_failure: *slackHook
  on_error: *slackHook

# ===== clusters:pr-e2e =====
- name: recreate-cluster-pr-e2e
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: pr-e2e-delete-timer
      trigger: true
    - get: korifi
    - get: korifi-ci
    - get: ci-image
    - get: cf-k8s-secrets
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      CLUSTER_TYPE: GKE
      NODE_MACHINE_TYPE: e2-custom-4-6144
      CI_REPO_LOCATION: europe
      CI_REPO_NAME: ci
      KPACK_REPO_LOCATION: europe
      KPACK_REPO_NAME: pr-e2e-images
  - do: *recreateCluster
  - do: *deployLatestKorifi
  on_failure: *slackHook
  on_error: *slackHook

resource_types:
- name: slack-notification
  type: registry-image
  source:
    username: ((docker.user))
    password: ((docker.pass))
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: pull-request
  type: registry-image
  source:
    repository: loggregatorbot/github-pr-resource
    username: ((docker.user))
    password: ((docker.pass))

- name: github-status
  type: registry-image
  source:
    repository: resource/github-status

resources:
- name: korifi-pr
  type: pull-request
  check_every: 1m
  source:
    repository: cloudfoundry/korifi
    access_token: ((github/korifi-bot-token))
    base_branch: main
    ignore_drafts: true
    required_review_approvals: 1
    trusted_teams: ["wg-cf-on-k8s-korifi-approvers", "wg-cf-on-k8s-bots"]
    trusted_users: ["dependabot"]

- name: korifi-ci
  type: git
  icon: git
  source:
    uri: https://github.com/cloudfoundry/korifi-ci.git
    branch: main

- name: cf-k8s-secrets
  type: git
  icon: git
  source:
    uri: ((github/cf-k8s-secrets.uri))
    branch: main
    private_key: ((github/cf-k8s-secrets.private_key))

- name: slack
  type: slack-notification
  icon: slack
  source:
    url: ((slack-notification.uri))

- name: ci-image
  type: registry-image
  source:
    repository: europe-docker.pkg.dev/cf-on-k8s-wg/ci/ci
    tag: latest
    username: _json_key
    password: ((gcp-artifact-registry-writer))

- name: gcloud-image
  type: registry-image
  source:
    repository: europe-docker.pkg.dev/cf-on-k8s-wg/ci/gcloud
    tag: latest
    username: _json_key
    password: ((gcp-artifact-registry-writer))

- name: korifi
  type: git
  icon: git
  source:
    uri: https://github.com/cloudfoundry/korifi.git
    branch: main

- name: pairup
  type: git
  icon: git
  source:
    uri: https://github.com/eirini-forks/pairup.git
    branch: master

- name: postfacto-fork
  type: git
  icon: git
  source:
    uri: https://github.com/eirini-forks/postfacto-release.git
    branch: main

- name: korifi-status
  type: github-status
  icon: checkbox-marked
  source:
    repo: cloudfoundry/korifi
    access_token: ((github/korifi-bot-token))

- name: golangci-lint-image
  type: registry-image
  source:
    repository: golangci/golangci-lint
    tag: latest
    username: ((docker.user))
    password: ((docker.pass))

- name: korifi-github-release
  type: github-release
  icon: egg-easter
  source:
    access_token: ((github/korifi.create_release_access_token))
    drafts: true
    owner: cloudfoundry
    repository: korifi

- name: korifi-release-version
  type: semver
  icon: counter
  source:
    branch: main
    driver: git
    file: korifi-release/version
    initial_version: 0.1.0
    private_key: ((github/cf-k8s-secrets.private_key))
    uri: ((github/cf-k8s-secrets.uri))

# we don't run periodics on weekends because we have assigned Sunday as a
# [EKS](https://github.com/cloudfoundry/cf-k8s-secrets/blob/14163bb96c9a7b6245a7fe3ff41968624e99b83d/ci-deployment/eks-e2e/eks-cluster.tf#L30)
# and
# [GKE](https://github.com/cloudfoundry/cf-k8s-secrets/blob/14163bb96c9a7b6245a7fe3ff41968624e99b83d/ci-deployment/gke-cluster/cluster-config/terraform.tf#L88)
# cluster maintenance window
- name: workdays-periodic-timer
  type: time
  source:
    days: [Monday,Tuesday,Wednesday,Thursday,Friday]
    interval: 20m
    start: 07:00 PM
    stop: 07:00 AM
    location: Europe/London
    initial_version: true

- name: bump-timer
  type: time
  source:
    days: [Monday,Tuesday,Wednesday,Thursday,Friday]
    start: 03:00 AM
    stop: 08:00 AM
    location: Europe/London
    initial_version: true

- name: pr-e2e-delete-timer
  type: time
  icon: bomb
  source:
    start: 7:00 AM
    stop: 8:00 AM
